version: '3'
services:
  product-service:
    container_name: product-event-service
    build: ./services/product
    ports:
      - "3001:3001"
    volumes:
      - ./shared:/app/shared # Mount the shared directory
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_started

  order-service:
    container_name: order-event-service
    build: ./services/order
    ports:
      - "3002:3002"
    volumes:
      - ./shared:/app/shared # Mount the shared directory
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_started

  user-service:
    container_name: user-event-service
    build: ./services/user
    ports:
      - "3003:3003"
    volumes:
      - ./shared:/app/shared # Mount the shared directory
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_started

  mongodb:
    container_name: mongodb-event-service
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest # Using the image from the example
    ports:
      - "8080:8080"
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local # Name your cluster "local"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092 # Connect to your Kafka broker

  kafka:
    container_name: kafka
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "product-events:1:1,order-events:1:1,user-events:1:1"

  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"

volumes:
  mongodb_data: